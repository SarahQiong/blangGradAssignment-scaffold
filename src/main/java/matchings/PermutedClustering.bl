package matchings

import matchings.Permutation

model PermutedClustering {
  param Integer nGroups
  param Integer groupSize
  random List<RealVar> means ?: latentRealList(groupSize)
  random List<RealVar> variances ?: latentRealList(groupSize)
  random List<Permutation> permutations ?: {
    val result = new ArrayList
    for (group : 0 ..< nGroups) 
      result.add(new Permutation(groupSize))
    return result
  }
  random Matrix observations ?: latentMatrix(nGroups, groupSize)
  
  laws {
    //Prior on variances:
    for (int i : 0 ..< variances.size) { 
      variances.get(i) ~ Exponential(10)
    }
    //Prior on means:
    means.get(0) ~ ContinuousUniform(0.0,1.0)
    for (int i : 1..<groupSize){
    	means.get(i) | RealVar prevmu = means.get(i-1) ~ ContinuousUniform(0.0+ prevmu,1.0+ prevmu) 
    }
    // prior over permutations:
    for(Permutation permutation:permutations){
    	permutation ~ UniformPermutation
    }
    // likelihood:
    for (int obsIdx : 0 ..< nGroups) {
    	for (int Idx : 0 ..<groupSize){
    		observations.getRealVar(obsIdx, Idx) | 
    		means, variances,
    		IntVar idx = permutations.get(obsIdx).getConnections().get(Idx) 
    		~ Normal(
    			means.get(idx),
    			variances.get(idx)
    		)   
    	}
    }
  }
}
